# [PackageDev] target_format: plist, ext: tmLanguage
---
name: BType
scopeName: source.btype
fileTypes: ['bt']
uuid: c56b4877-01b3-4784-a64e-1ba4f9dd6469

patterns:
- include: "#invalid"
- include: "#core"
- include: "#comments"
- match: "\\b(break|case|continue|default|do|else|for|if|return|switch|while|export|import|operator)\\b"
  name: "keyword.control.btype"
- match: "\\b(or|and|new|as)\\b"
  name: "keyword.operator.btype"
- match: "!|\\+|\\-|/|\\*|%|==|!=|<=|>=|=|<|>|<<|>>|&|\\||\\^"
  name: "keyword.operator.btype"
- begin: "(func)\\b(\\w+)(:)(\\w+)\\s*\\("
  end: "\\)"
  beginCaptures:
    '1':
      name: "keyword.control.function.btype"
    '2':
      name: "storage.type.btype"
    '3':
      name: "punctuation.definitions.typesep.btype"
    '4':
      name: "entity.name.function.btype"
  patterns:
    - match: "(?<=:)\\w+"
      name: "variable.parameter.btype"
    - match: "\\w+(?=:)"
      name: "storage.type.parameter.btype"
  name: "meta.function.btype"
- begin: "([a-zA-Z_][a-zA-Z0-9_]*)(\\()"
  end: "(\\))"
  beginCaptures:
    '1':
      name: "entity.name.function.btype"
    '2':
      name: "meta.group.braces.round.function.arguments.btype"
  endCaptures:
    '1':
      name: "meta.group.braces.round.function.arguments.btype"
  patterns:
    - match: "(?<=:)[a-zA-Z_][a-zA-Z0-9_]*"
      name: "variable.parameter.btype"
    - match: "[a-zA-Z_][a-zA-Z0-9_]*(?=:)"
      name: "storage.type.parameter.btype"
  name: "meta.function-call.static.with-args.btype"
- begin: "([a-zA-Z_][a-zA-Z0-9_]*)\\s*(<)"
  beginCaptures:
    '1': {name: "storage.type.btype"}
  end: ">"

repository:
  core:
    patterns:
    - include: "#classes"
    - include: "#literals"
    - include: "#braces"
  invalid:
    patterns:
    - match: "\\b&&"
      name: "invalid.illegal.binop-and.btype"
    - match: "\\|\\|"
      name: "invalid.illegal.binop-or.btype"
    - match: "(\\/\\/)"
      name: "invalid.illegal.comment.btype"
    - match: "^\t+"
      name: "invalid.illegal.tab-indent.btype"
  classes:
    patterns:
    - begin: "(object)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\{)"
      name: "meta.class.btype"
      end: "\\}"
      beginCaptures:
        '1':
          name: "keyword.control.class.btype"
        '2':
          name: "entity.name.type.btype"
        '3':
          name: "meta.brace.curly.btype"
      patterns:
        - match: "(with)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(;)"
          captures:
            '1': {name: "keyword.control.btype"}
            '2': {name: "storage.type.btype"}
            '3': {name: "punctuation.terminator.statement.btype"}
        - begin: "(new)\\s*(?=\\([^())]*\\)\\s*\\{)"
          beginCaptures:
            '1': {name: "keyword.control.btype"}
          end: "\\}"
          name: "meta.function.constructor.btype"
          patterns:
            - include: "#function-params"
        - begin: "(?:[\\w\\.]+)(:)([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\([^())]*\\)\\s*\\{)"
          beginCaptures:
            '1': {name: "punctuation.colon.btype"}
            '2': {name: "entity.name.method.btype"}
          end: "\\}"
          name: "meta.function.method.btype"
          patterns:
            - include: "#type"
            - include: "#function-params"
        - begin: "([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\([^())]*\\)\\s*\\{)"
          beginCaptures:
            '1': {name: "entity.name.method.btype"}
          end: "\\}"
          name: "meta.function.method.btype"
          patterns:
            - include: "#function-params"
        - match: "(?:[\\w<>\\.]+)\\s*(:)\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*;"
          captures:
            '1': {name: "punctuation.colon.btype"}
            '2': {name: "variable.parameter.btype"}
          name: "meta.parameter.btype"
          patterns:
          - include: "#type"
        - include: "#comments"
  type:
    patterns:
    - begin: "([\\w\\.]+)(<)"
      beginCaptures:
        '1': {name: "storage.type.btype"}
        '2': {name: "punctuation.definition.type.begin.btype"}
      end: "(>)"
      endCaptures:
        '1': {name: "punctuation.definition.type.end.btype"}
      name: "meta.type.attributed.btype"
      patterns:
      - match: ","
        name: "meta.delimiter.parameters.comma.btype"
      - include: "#type"
    - match: "([\\w\\.]+)"
      captures:
        '1': {name: "storage.type.btype"}
    - match: "\\b(bool|float|sfloat|uint|func|int|var|str|array)\\b"
      name: "storage.type.btype"
  function-params:
    patterns:
    - begin: "(\\()"
      end: "(\\))"
      beginCaptures:
        '1': {name: "punctuation.definition.parameters.begin.btype"}
      endCaptures:
        '1': {name: "punctuation.definition.parameters.end.btype"}
      patterns:
      - match: "(?:[\\w\\.<>]+)(:)([a-zA-Z_][a-zA-Z0-9_]*)"
        captures:
          '1': {name: "meta.delimiter.type.colon.btype"}
          '2': {name: "variable.parameter.function.btype"}
        patterns:
          - include: "#type"
      - include: "#comments"
  literals:
    patterns:
    - match: "\\b[1-9][0-9]*\\.[0-9]+s?"
      name: "constant.numeric.btype"
      comment: "Floats"
    - match: "\\b0\\.[0-9]+s?"
      name: "constant.numeric.btype"
      comment: "Floats"
    - match: "\\b\\-?[1-9][0-9]*(?!\\.)s?"
      name: "constant.numeric.btype"
      comment: "Integers"
    - match: "\\b0(?!\\.)"
      name: "constant.numeric.btype"
      comment: "Integer 0"
    - match: "\\b(true|false|null)\\b"
      name: "constant.language.btype"
      comment: "Primitive type literals"
    - begin: "\""
      beginCaptures:
        '0':
          name: "punctuation.definition.string.begin.btype"
      end: "\""
      endCaptures:
        '0':
          name: "punctuation.definition.string.end.btype"
      name: "string.quoted.double.btype"
      patterns:
        - match: "\\."
          name: "constant.character.escape.btype"
    - begin: "'"
      beginCaptures:
        '0':
          name: "punctuation.definition.string.begin.btype"
      end: "'"
      endCaptures:
        '0':
          name: "punctuation.definition.string.end.btype"
      name: "string.quoted.single.btype"
      patterns:
        - match: "\\."
          name: "constant.character.escape.btype"
  punctuation:
    patterns:
    - match: ",\\s*"
      name: "meta.delimiter.object.comma.btype"
    - match: "\\."
      name: "meta.delimiter.object.period.btype"
    - match: ";"
      name: "punctuation.terminator.statement.btype"
  braces:
    patterns:
    - name: "meta.group.braces.round"
      begin: (\()
      beginCaptures:
        '1': {name: meta.brace.round.btype}
      end: (\))
      endCaptures:
        '1': {name: meta.brace.round.btype}
      patterns:
      - include: $self
    - name: "meta.group.braces.square"
      begin: (\[)
      beginCaptures:
        '1': {name: meta.brace.square.btype}
      end: (\])
      endCaptures:
        '1': {name: meta.brace.square.btype}
      patterns:
      - include: $self
    - name: "meta.group.braces.curly"
      begin: ({)
      beginCaptures:
        '1': {name: meta.brace.curly.btype}
      end: (})
      endCaptures:
        '1': {name: meta.brace.curly.btype}
      patterns:
      - include: $self
  comments:
    patterns:
    - match: "#[^\\n\\r]*"
      name: "comment.line.number-sign.btype"
      comment: "Comments"
...
